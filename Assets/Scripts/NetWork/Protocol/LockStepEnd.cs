// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LockStepEnd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from LockStepEnd.proto</summary>
  public static partial class LockStepEndReflection {

    #region Descriptor
    /// <summary>File descriptor for LockStepEnd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LockStepEndReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFMb2NrU3RlcEVuZC5wcm90bxIIUHJvdG9jb2wiMQoLTG9ja1N0ZXBFbmQS",
            "EAoIa2V5RnJhbWUYAiABKAUSEAoIbXNnVG90YWwYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LockStepEnd), global::Protocol.LockStepEnd.Parser, new[]{ "KeyFrame", "MsgTotal" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 第X关键帧同步完成
  /// </summary>
  public sealed partial class LockStepEnd : pb::IMessage<LockStepEnd> {
    private static readonly pb::MessageParser<LockStepEnd> _parser = new pb::MessageParser<LockStepEnd>(() => new LockStepEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockStepEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.LockStepEndReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepEnd(LockStepEnd other) : this() {
      keyFrame_ = other.keyFrame_;
      msgTotal_ = other.msgTotal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepEnd Clone() {
      return new LockStepEnd(this);
    }

    /// <summary>Field number for the "keyFrame" field.</summary>
    public const int KeyFrameFieldNumber = 2;
    private int keyFrame_;
    /// <summary>
    /// 该关键帧是第几帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyFrame {
      get { return keyFrame_; }
      set {
        keyFrame_ = value;
      }
    }

    /// <summary>Field number for the "msgTotal" field.</summary>
    public const int MsgTotalFieldNumber = 3;
    private int msgTotal_;
    /// <summary>
    /// 同步的消息数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgTotal {
      get { return msgTotal_; }
      set {
        msgTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockStepEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockStepEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyFrame != other.KeyFrame) return false;
      if (MsgTotal != other.MsgTotal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyFrame != 0) hash ^= KeyFrame.GetHashCode();
      if (MsgTotal != 0) hash ^= MsgTotal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KeyFrame);
      }
      if (MsgTotal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MsgTotal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyFrame);
      }
      if (MsgTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgTotal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockStepEnd other) {
      if (other == null) {
        return;
      }
      if (other.KeyFrame != 0) {
        KeyFrame = other.KeyFrame;
      }
      if (other.MsgTotal != 0) {
        MsgTotal = other.MsgTotal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            KeyFrame = input.ReadInt32();
            break;
          }
          case 24: {
            MsgTotal = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
